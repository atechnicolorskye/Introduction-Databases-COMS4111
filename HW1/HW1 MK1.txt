CREATE TABLE Professor(
	ssn int PRIMARY KEY,
	p_name char(24),
	since date,
	tenure Boolean	
	)
	
We assume that a tenured professor would have a 1 in the tenure column and a junior professor 0 and the date in since refers to the year a professor earned tenure for a tenured professor or the number of years a professor has been hired for a junior professor.

CREATE TABLE Department(
	d_name char(24) PRIMARY KEY
	)
	
CREATE TABLE is_affiliated_with(
	ssn int,	
	d_name char(24) REFERENCES Department NOT NULL,
	PRIMARY KEY(ssn),
	FOREIGN KEY(ssn) REFERENCES Professor
	)

We assume the above ensures that a professor would be at least affiliated with one department. Since we were taught SQL does not have a method for us to do that (at least for what we have learned till now), the constraint is assumed to be baked into the application.

CREATE TABLE has_chair(
	ssn int, NOT NULL,
	tenure int, NOT NULL,
	CHECK (tenure = 1),
	d_name char(24) REFERENCES Department,
	PRIMARY KEY(d_name),
	FOREIGN KEY(ssn, tenure) REFERENCES Professor
	)

We don't need SSN to be part of the primary key as each department can only have one chair.

CREATE TABLE Course_Department(
	c_no int,
	c_name char(24),
	c_capac int,
	d_name char(24),
	PRIMARY KEY(c_no, d_name)
	FOREIGN KEY(d_name) REFERENCES Department
		ON DELETE CASCADE
	)

CREATE TABLE CD_Term_Taught(
	c_no int REFERENCES Course_Department,
	d_name char(24) REFERENCES Course_Department,
	ssn int,
	t_semester char(24),
	t_year date,
	PRIMARY KEY((c_no, d_name), t_semester, t_year),
	FOREIGN KEY(ssn) REFERENCES Professor
	)

We assume that the we can uniquely identify a course by its name, the department sponsoring it and the semester year it was taught. We also ensure that c_no and d_name are in a tuple and within the primary key to keep the constraint that each course is only sponsored by a single department. 